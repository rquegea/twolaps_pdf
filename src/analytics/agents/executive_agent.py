"""
Executive Agent
S칤ntesis ejecutiva final - Genera el informe completo
"""

import json
from datetime import datetime
import yaml
from pathlib import Path
from typing import Dict, Any
from src.analytics.agents.base_agent import BaseAgent
from src.analytics.rag_manager import RAGManager
from src.database.models import AnalysisResult, Report, Categoria, Mercado
from src.query_executor.api_clients import OpenAIClient
from sqlalchemy.exc import IntegrityError


class ExecutiveAgent(BaseAgent):
    """
    Agente ejecutivo
    Genera s칤ntesis consultiva completa leyendo todos los an치lisis previos
    """
    
    def __init__(self, session, version: str = "1.0.0"):
        super().__init__(session, version)
        self.client = OpenAIClient()
        # task/system prompts se cargar치n din치micamente al analizar
    
    def load_prompts(self):
        """Compat: m칠todo legado no usado."""
        pass
    
    def analyze(self, categoria_id: int, periodo: str) -> Dict[str, Any]:
        """
        Genera s칤ntesis ejecutiva completa
        
        Args:
            categoria_id: ID de categor칤a
            periodo: Periodo (YYYY-MM)
        
        Returns:
            Dict con informe completo estructurado
        """
        # Obtener informaci칩n de categor칤a
        categoria = self.session.query(Categoria).get(categoria_id)
        if not categoria:
            return {'error': 'Categor칤a no encontrada'}
        
        mercado = self.session.query(Mercado).get(categoria.mercado_id)
        categoria_nombre = f"{mercado.nombre}/{categoria.nombre}"
        
        # Obtener todos los an치lisis previos
        # Cargar prompts seg칰n tipo de mercado
        self.load_prompts_dynamic(categoria_id, default_key='executive_agent')
        quantitative = self._get_analysis('quantitative', categoria_id, periodo)
        qualitative = self._get_analysis('qualitative', categoria_id, periodo)
        if not qualitative:
            qualitative = self._get_analysis('qualitativeextraction', categoria_id, periodo)
        competitive = self._get_analysis('competitive', categoria_id, periodo)
        trends = self._get_analysis('trends', categoria_id, periodo)
        strategic = self._get_analysis('strategic', categoria_id, periodo)
        synthesis = self._get_analysis('synthesis', categoria_id, periodo)
        
        # NUEVO: Obtener an치lisis FMCG especializados
        campaign = self._get_analysis('campaign_analysis', categoria_id, periodo)
        channel = self._get_analysis('channel_analysis', categoria_id, periodo)
        esg = self._get_analysis('esg_analysis', categoria_id, periodo)
        packaging = self._get_analysis('packaging_analysis', categoria_id, periodo)
        
        # Degradaci칩n para primer ciclo: si faltan algunos an치lisis, generamos un informe m칤nimo
        missing = []
        if not quantitative:
            missing.append('quantitative')
        if not qualitative:
            missing.append('qualitative')
        if not competitive:
            missing.append('competitive')
        if not strategic:
            missing.append('strategic')
        if not synthesis:
            missing.append('synthesis')
        
        if missing:
            self.logger.warning(f"Faltan an치lisis previos: {', '.join(missing)}. Generando informe m칤nimo.")
        
        # ACTIVAR RAG - Obtener contexto hist칩rico
        rag_manager = RAGManager(self.session)
        historical_context = rag_manager.get_historical_context(
            categoria_id,
            periodo,
            top_k=2
        )
        
        # NUEVO: Obtener muestra estratificada de respuestas textuales
        raw_responses = self._get_stratified_sample(categoria_id, periodo, samples_per_group=2)
        
        # Construir prompt completo con todos los KPIs Y respuestas textuales
        prompt = self._build_prompt(
            categoria_nombre,
            periodo,
            quantitative,
            qualitative,
            competitive,
            trends,
            strategic,
            synthesis,
            historical_context,
            raw_responses,
            campaign,
            channel,
            esg,
            packaging
        )
        
        # Generar informe con LLM (tokens aumentados para informe extenso de nivel consultora)
        try:
            result = self.client.generate(
                prompt=prompt,
                temperature=0.7,   # Mayor creatividad para narrativas fluidas tipo McKinsey
                max_tokens=16000,  # 游댠 L칤mite m치ximo (16K permite informes de 35-50 p치ginas con densidad m치xima)
                json_mode=True
            )
            
            # Obtener respuesta
            response_text = result.get('response_text', '')
            
            # Log para debug
            self.logger.debug(f"Respuesta del LLM (primeros 500 chars): {response_text[:500]}")
            
            # Limpiar respuesta: extraer JSON si est치 dentro de markdown code blocks
            response_text = response_text.strip()
            
            # Si est치 en un code block de markdown, extraerlo
            if response_text.startswith('```'):
                # Buscar el inicio del JSON
                lines = response_text.split('\n')
                json_lines = []
                in_json = False
                
                for line in lines:
                    if line.strip().startswith('```'):
                        if not in_json:
                            in_json = True
                            continue
                        else:
                            break
                    if in_json:
                        json_lines.append(line)
                
                response_text = '\n'.join(json_lines).strip()
            
            # Validar que no est칠 vac칤o
            if not response_text:
                self.logger.error("Respuesta vac칤a del LLM")
                return {'error': 'Respuesta vac칤a del LLM'}
            
            # Parsear JSON (intentando extraer el primer objeto JSON v치lido si hay ruido)
            try:
                informe = json.loads(response_text)
            except json.JSONDecodeError:
                # Intento de extracci칩n simple del primer bloque JSON con llaves
                start = response_text.find('{')
                end = response_text.rfind('}')
                if start != -1 and end != -1 and end > start:
                    candidate = response_text[start:end+1]
                    try:
                        informe = json.loads(candidate)
                    except json.JSONDecodeError as e2:
                        self.logger.error(f"Error parseando JSON (2do intento): {e2}")
                        self.logger.error(f"Texto recibido: {response_text[:1000]}")
                        return {'error': f'Error parseando JSON del LLM: {str(e2)}'}
                else:
                    self.logger.error("No se encontr칩 bloque JSON en la respuesta")
                    self.logger.error(f"Texto recibido: {response_text[:1000]}")
                    return {'error': 'Respuesta del LLM no contiene JSON v치lido'}
            
            # Validar estructura
            informe = self._validate_and_complete_report(informe, quantitative, strategic)
            
            # Guardar/actualizar en tabla reports (UPSERT por categoria_id + periodo)
            metrics = {
                'hallazgos': len(informe.get('resumen_ejecutivo', {}).get('hallazgos_clave', [])),
                'oportunidades': len(informe.get('oportunidades_riesgos', {}).get('oportunidades', [])),
                'riesgos': len(informe.get('oportunidades_riesgos', {}).get('riesgos', [])),
                'plan_acciones': len(informe.get('plan_90_dias', {}).get('iniciativas', []))
            }

            try:
                existing = self.session.query(Report).filter_by(
                    categoria_id=categoria_id,
                    periodo=periodo
                ).first()

                if existing:
                    existing.estado = 'draft'
                    existing.contenido = informe
                    existing.pdf_path = None
                    existing.generado_por = f"executive_agent_v{self.version}"
                    existing.timestamp = datetime.utcnow()
                    existing.metricas_calidad = metrics
                    self.session.commit()
                    report = existing
                else:
                    report = Report(
                        categoria_id=categoria_id,
                        periodo=periodo,
                        estado='draft',
                        contenido=informe,
                        pdf_path=None,
                        generado_por=f"executive_agent_v{self.version}",
                        timestamp=datetime.utcnow(),
                        metricas_calidad=metrics
                    )
                    self.session.add(report)
                    self.session.commit()
                
                return {
                    'report_id': report.id,
                    'informe': informe,
                    'metadata': {
                        'categoria': categoria_nombre,
                        'periodo': periodo,
                        'tokens_usados': result.get('tokens_input', 0) + result.get('tokens_output', 0)
                    }
                }
            except IntegrityError as e:
                self.session.rollback()
                return {'error': f'Error al guardar reporte: {str(e)}'}
        
        except Exception as e:
            return {'error': f'Error al generar informe: {str(e)}'}
    
    def _build_prompt(
        self,
        categoria: str,
        periodo: str,
        quantitative: Dict,
        qualitative: Dict,
        competitive: Dict,
        trends: Dict,  # pylint: disable=unused-argument
        strategic: Dict,
        synthesis: Dict,
        historical_context: str,
        raw_responses: str,
        campaign: Dict,
        channel: Dict,
        esg: Dict,
        packaging: Dict
    ) -> str:
        """Construye el prompt completo con todos los datos (EXPANDIDO para FMCG Premium)"""
        
        prompt = f"""
{self.system_prompt}

===========================================
MISI칍N: GENERAR INFORME NARRATIVO TIPO McKINSEY
===========================================

丘멆잺 NO GENERES UN "DUMP" DE DATOS. CUENTA UNA HISTORIA ESTRAT칄GICA. 丘멆잺

REGLAS NARRATIVAS CR칈TICAS:
1. Cada secci칩n debe DESARROLLARSE en 3-7 p치rrafos fluidos y conectados
2. NO uses listas de bullets como respuesta principal (칰salas solo para respaldar narrativas)
3. USA transiciones narrativas: "Esto explica...", "Sin embargo...", "A pesar de...", "Lo que revela..."
4. CITA datos espec칤ficos DENTRO de las narrativas (no como ap칠ndices)
5. CONECTA insights entre secciones para construir un argumento coherente
6. Escribe como si estuvieras presentando en vivo a un CEO

CATEGOR칈A: {categoria}
PERIODO: {periodo}

========================================
NARRATIVA CENTRAL (TU GUION):
========================================
Situaci칩n: {synthesis.get('situacion', '')}
Complicaci칩n: {synthesis.get('complicacion', '')}
Pregunta Clave: {synthesis.get('pregunta_clave', '')}

========================================
CONTEXTO HIST칍RICO:
========================================
{historical_context}

========================================
DATOS CUANTITATIVOS (KPIs):
========================================
- Total menciones: {quantitative.get('total_menciones', 0)}
- SOV: {json.dumps(quantitative.get('sov_percent', {}), indent=2)}
- Sentimiento: {json.dumps(qualitative.get('sentimiento_por_marca', {}), indent=2)}
- L칤der mercado: {competitive.get('lider_mercado', 'N/A')}

========================================
AN츼LISIS FMCG DETALLADO:
========================================

AN츼LISIS DE CAMPA칌AS Y MARKETING:
{json.dumps(campaign, indent=2) if campaign else 'No disponible'}

AN츼LISIS DE CANALES Y DISTRIBUCI칍N:
{json.dumps(channel, indent=2) if channel else 'No disponible'}

AN츼LISIS ESG Y SOSTENIBILIDAD:
{json.dumps(esg, indent=2) if esg else 'No disponible'}

AN츼LISIS DE PACKAGING Y DISE칌O:
{json.dumps(packaging, indent=2) if packaging else 'No disponible'}

========================================
AN츼LISIS ESTRAT칄GICO (DAFO, OPORTUNIDADES, RIESGOS):
========================================
- DAFO: {json.dumps(strategic.get('dafo', {}), indent=2)}
- Oportunidades: {json.dumps(strategic.get('oportunidades', [])[:5], indent=2)}
- Riesgos: {json.dumps(strategic.get('riesgos', [])[:5], indent=2)}

========================================
MUESTRA DE RESPUESTAS TEXTUALES (PARA CITAS):
========================================
{raw_responses[:4000]}

========================================
ESTRUCTURA JSON NARRATIVA REQUERIDA:
========================================

丘멆잺 IMPORTANTE: Los campos "narrativa_*" y "narrativa" son el CONTENIDO PRINCIPAL del informe.
Cada uno debe tener 3-7 p치rrafos sustanciales desarrollando el argumento.

{{
  "resumen_ejecutivo": {{
    "narrativa_principal": "DESARROLLA EN 4-6 P츼RRAFOS: Empieza con la situaci칩n del mercado (integrando KPIs clave como SOV, menciones, tendencias), luego desarrolla la complicaci칩n (la tensi칩n estrat칠gica central con evidencia cuantitativa + citas cualitativas del raw_responses), y finalmente responde a la pregunta clave con los hallazgos principales y su implicaci칩n. Esta debe ser una narrativa fluida y argumentativa, no una lista.",
    "hallazgos_clave": [
      "Hallazgo 1 con evidencia integrada (KPI + cita cualitativa)",
      "Hallazgo 2 respondiendo a la pregunta clave",
      "Hallazgo 3 accionable con implicaci칩n de negocio",
      "Hallazgo 4",
      "Hallazgo 5"
    ],
    "recomendacion_principal": "1-2 p치rrafos con la recomendaci칩n estrat칠gica de m치s alto nivel, vinculada a resolver la complicaci칩n"
  }},
  
  "panorama_mercado": {{
    "narrativa": "DESARROLLA EN 5-7 P츼RRAFOS: Describe la naturaleza del mercado/categor칤a (usando la situaci칩n del synthesis_agent como apertura), tama침o y crecimiento si disponible, drivers de categor칤a principales con ejemplos espec칤ficos de c칩mo impactan decisiones, factores PESTEL m치s relevantes con implicaciones concretas (NO gen칠ricas), an치lisis de Fuerzas de Porter adaptado a este mercado. Cuenta c칩mo funciona este mercado y qu칠 factores lo moldean. Conecta los factores entre s칤."
  }},
  
  "analisis_competitivo": {{
    "narrativa_dinamica": "DESARROLLA EN 4-6 P츼RRAFOS: Analiza la din치mica competitiva actual: qui칠n domina y por qu칠 (con datos de SOV y sentimiento), c칩mo se posicionan las marcas principales, correlaciones entre visibilidad/percepci칩n/marketing/canal, gaps competitivos explotables. Conecta m칰ltiples dimensiones para revelar la historia competitiva. Menciona expl칤citamente 'Como muestra el Gr치fico de SOV...'",
    "perfiles_narrativos": [
      {{
        "marca": "Marca Principal 1",
        "analisis_profundo": "DESARROLLA EN 2-3 P츼RRAFOS: Posicionamiento percibido con evidencia, fortalezas clave sustentadas por datos, debilidades y vulnerabilidades espec칤ficas, estrategia de marketing y canal inferida, oportunidades de ataque o defensa. Cuenta la historia de esta marca en el mercado."
      }},
      {{
        "marca": "Marca Principal 2",
        "analisis_profundo": "DESARROLLA EN 2-3 P츼RRAFOS: [Mismo formato]"
      }},
      {{
        "marca": "Marca Principal 3",
        "analisis_profundo": "DESARROLLA EN 2-3 P츼RRAFOS: [Mismo formato]"
      }}
    ]
  }},
  
  "analisis_campanas": {{
    "narrativa": "DESARROLLA EN 3-5 P츼RRAFOS: S칤ntesis de la actividad de marketing en el mercado: qu칠 marcas comunican activamente y c칩mo, principales campa침as y mensajes clave, canales utilizados, percepci칩n de efectividad y recepci칩n cualitativa, gaps (marcas silenciosas o con comunicaci칩n inefectiva a pesar de alto SOV). Usa datos del an치lisis de Campa침as."
  }},
  
  "analisis_canales": {{
    "narrativa": "DESARROLLA EN 3-5 P츼RRAFOS: Estrategias de distribuci칩n observadas (intensiva/selectiva/exclusiva), ventajas competitivas en accesibilidad y presencia omnicanal, gaps de e-commerce y oportunidades digitales, retailers clave y experiencia de compra diferenciada. Usa datos del an치lisis de Canales."
  }},
  
  "analisis_sostenibilidad_packaging": {{
    "narrativa": "DESARROLLA EN 3-4 P츼RRAFOS: Percepci칩n ESG del mercado (controversias, l칤deres, rezagados), an치lisis de packaging (problemas funcionales, dise침o, innovaciones), importancia relativa de ESG y packaging como drivers de decisi칩n, oportunidades de diferenciaci칩n. Conecta ESG y packaging cuando sea relevante."
  }},
  
  "consumidor": {{
    "narrativa_voz_cliente": "DESARROLLA EN 4-5 P츼RRAFOS: Integra citas textuales directas del raw_responses para dar vida a la voz del consumidor. Desarrolla drivers de elecci칩n con ejemplos espec칤ficos de POR QU칄 eligen cada marca, explica barreras de compra con evidencia cualitativa, describe ocasiones de consumo principales y c칩mo impactan la decisi칩n, identifica tensiones o contradicciones. HAZ QUE EL CONSUMIDOR COBRE VIDA con sus propias palabras entrecomilladas."
  }},
  
  "sentimiento_reputacion": {{
    "narrativa": "DESARROLLA EN 3-4 P츼RRAFOS: Presenta scores de sentimiento por marca con contexto (no solo n칰meros), EXPLICA el 'por qu칠' detr치s de cada score con insights cualitativos del texto crudo, analiza correlaciones entre sentimiento/SOV/marketing, identifica cambios vs periodos anteriores si hay contexto hist칩rico. Menciona 'Como muestra el Gr치fico de Sentimiento...'"
  }},
  
  "oportunidades_riesgos": {{
    "narrativa_oportunidades": "DESARROLLA EN 3-4 P츼RRAFOS: Profundiza en las TOP 3-5 oportunidades m치s cr칤ticas, explicando la l칩gica, evidencia multi-fuente, impacto potencial, y c칩mo capitalizarlas. Conecta oportunidades entre s칤 si es relevante.",
    "narrativa_riesgos": "DESARROLLA EN 3-4 P츼RRAFOS: Profundiza en los TOP 3-5 riesgos m치s graves, explicando probabilidad, severidad, evidencia, y estrategias de mitigaci칩n. Identifica escenarios de mayor peligro.",
    "oportunidades": {json.dumps(strategic.get('oportunidades', [])[:5])},
    "riesgos": {json.dumps(strategic.get('riesgos', [])[:5])},
    "dafo_sintesis": {{
      "fortalezas_clave": ["F1", "F2", "F3"],
      "debilidades_clave": ["D1", "D2", "D3"],
      "oportunidades_clave": ["O1", "O2", "O3"],
      "amenazas_clave": ["A1", "A2", "A3"],
      "cruces_estrategicos": "DESARROLLA EN 2-3 P츼RRAFOS: Analiza los cruces DAFO m치s relevantes (FO: c칩mo usar fortalezas para oportunidades, DO: c칩mo superar debilidades para oportunidades, FA: c칩mo usar fortalezas contra amenazas, DA: escenarios de mayor riesgo)"
    }}
  }},
  
  "plan_90_dias": {{
    "narrativa_estrategia": "DESARROLLA EN 2-3 P츼RRAFOS: Explica la l칩gica del plan de acci칩n completo: por qu칠 estas iniciativas, en este orden, para resolver la complicaci칩n identificada. Justifica la priorizaci칩n.",
    "iniciativas": [
      {{
        "titulo": "Iniciativa 1",
        "descripcion": "QU칄 hacer exactamente (2-3 l칤neas detalladas, NO bullets)",
        "por_que": "POR QU칄 hacerlo - vinculado expl칤citamente a la complicaci칩n y datos espec칤ficos (2-3 l칤neas)",
        "como": "C칍MO ejecutarlo con pasos concretos o t치cticas (2-3 l칤neas)",
        "kpi_medicion": "M칠trica espec칤fica para medir 칠xito",
        "timeline": "Mes 1-2",
        "prioridad": "alta"
      }},
      {{
        "titulo": "Iniciativa 2",
        "descripcion": "...",
        "por_que": "...",
        "como": "...",
        "kpi_medicion": "...",
        "timeline": "Mes 2-3",
        "prioridad": "alta"
      }},
      {{
        "titulo": "Iniciativa 3",
        "descripcion": "...",
        "por_que": "...",
        "como": "...",
        "kpi_medicion": "...",
        "timeline": "Mes 2-3",
        "prioridad": "media"
      }},
      {{
        "titulo": "Iniciativa 4",
        "descripcion": "...",
        "por_que": "...",
        "como": "...",
        "kpi_medicion": "...",
        "timeline": "Mes 3",
        "prioridad": "media"
      }},
      {{
        "titulo": "Iniciativa 5",
        "descripcion": "...",
        "por_que": "...",
        "como": "...",
        "kpi_medicion": "...",
        "timeline": "Mes 3",
        "prioridad": "baja"
      }}
    ]
  }}
}}

REGLAS CR칈TICAS DE NARRATIVA:
1. **NARRATIVA SOBRE BULLETS**: Los campos "narrativa_*" y "narrativa" son el CONTENIDO PRINCIPAL. Los bullets son complemento.
2. **TRANSICIONES**: Usa conectores argumentativos: "Esto explica...", "Sin embargo...", "A pesar de...", "Lo que revela..."
3. **INTEGRACI칍N DE DATOS**: Cita KPIs DENTRO de las narrativas: "El l칤der domina con 54% de SOV, sin embargo, su sentimiento neutral (0.05) revela..."
4. **CITAS TEXTUALES**: Incluye citas directas del raw_responses: "Como menciona un consumidor: '...'"
5. **REFERENCIAS A GR츼FICOS**: Menciona expl칤citamente: "Como muestra el Gr치fico de SOV..."
6. **CONEXIONES**: Crea puentes narrativos entre secciones para mantener el hilo argumentativo
7. **INTEGRA TODO**: KPIs + FMCG (Campa침as, Canales, ESG, Packaging) + Estrategia en una historia cohesiva
8. **PROFUNDIDAD**: Cada campo narrativo debe tener 3-7 p치rrafos sustanciales (4-8 l칤neas cada uno)
9. **El plan de 90 d칤as debe RESOLVER la complicaci칩n identificada**
10. **RESPONDE 칔NICAMENTE CON EL JSON V츼LIDO, SIN TEXTO ADICIONAL NI MARKDOWN, SIN BLOQUES DE C칍DIGO**
"""
        
        return prompt
    
    def _validate_and_complete_report(self, informe: Dict, quantitative: Dict, strategic: Dict) -> Dict:  # pylint: disable=unused-argument
        """Valida y completa el informe si falta algo"""
        
        # Asegurar secciones m칤nimas
        if 'resumen_ejecutivo' not in informe:
            informe['resumen_ejecutivo'] = {
                'hallazgos_clave': ['An치lisis en proceso'],
                'contexto': 'Informe generado autom치ticamente'
            }
        
        if 'plan_90_dias' not in informe or not informe['plan_90_dias'].get('iniciativas'):
            # Generar plan b치sico desde oportunidades
            iniciativas = []
            for opp in strategic.get('oportunidades', [])[:3]:
                iniciativas.append({
                    'titulo': opp.get('titulo', ''),
                    'descripcion': opp.get('descripcion', ''),
                    'prioridad': opp.get('prioridad', 'media'),
                    'timeline': 'Mes 1-3'
                })
            
            informe['plan_90_dias'] = {'iniciativas': iniciativas}
        
        return informe
    
    def _get_analysis(self, agent_name: str, categoria_id: int, periodo: str) -> Dict:
        """Helper para obtener an치lisis"""
        result = self.session.query(AnalysisResult).filter_by(
            categoria_id=categoria_id,
            periodo=periodo,
            agente=agent_name
        ).first()
        
        return result.resultado if result else {}

